name: Update database

on:
  workflow_dispatch:
    inputs:
      collections:
        description: 'Space-separated list of collections to update'
        required: false
        default: ''
  schedule:
    - cron: "0 */2 * * *"

concurrency:
  group: update-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  update:
    name: Update database
    runs-on: self-hosted
    outputs:
      condition: ${{ steps.update.outputs.condition }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Install dependencies
        run: |
          sudo apt update && sudo apt install -y curl dotnet8 git python3-pip python3-venv wget zip

          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
          nvm install node
          npm install

          python3 -m venv venv \
          && source venv/bin/activate \
          && pip install -r scripts/requirements.txt \
          && mkdir -p ~/.local/share/arkprts \
          && echo "{}" | tee ~/.local/share/arkprts/arkprts_auth_cache.json

          git clone --no-checkout --filter=blob:none https://github.com/HellaOrg/HellaAssets \
          && cd HellaAssets \
          && git sparse-checkout init --cone \
          && git sparse-checkout set gamedata \
          && git checkout main \
          && cd ..

      - name: Update database
        id: update
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          YOSTAR_UID: ${{ secrets.YOSTAR_UID }}
          YOSTAR_TOKEN: ${{ secrets.YOSTAR_TOKEN }}
        run: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
          source venv/bin/activate

          COLLECTIONS=""
          if [ -n "${{ github.event.inputs.collections }}" ]; then
            COLLECTIONS="--collections ${{ github.event.inputs.collections }}"
          fi

          npm run ci -- --gamedata_path HellaAssets/gamedata $COLLECTIONS | tee load.out

          if [[ "${PIPESTATUS[0]}" -ne 0 ]]; then
            exit 1
          fi
          if [[ $(grep -c "new docs" load.out) -gt 0 ]]; then
            echo "condition=true" >> $GITHUB_OUTPUT
          else
            echo "condition=false" >> $GITHUB_OUTPUT
          fi
          if [[ $(grep -c "schema validation errors" load.out) -gt 0 ]]; then
            echo "schema=true" >> $GITHUB_OUTPUT
          else
            echo "schema=false" >> $GITHUB_OUTPUT
          fi

      - name: Print schema validation errors
        if: steps.update.outputs.schema == 'true'
        run: |
          for file in $(find . -name 'schema*.log'); do
            echo "=== $file ==="
            cat "$file"
            echo ""
          done

  test:
    name: Verify types
    needs: update
    if: needs.update.outputs.condition == 'true'
    uses: ./.github/workflows/test.yml
    secrets:
      MONGO_URI: ${{ secrets.MONGO_URI }}
